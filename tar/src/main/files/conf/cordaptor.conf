// Below is the reference configuration already built into Cordaptor modules that are part of the distribution.
// In order to change any value you could uncomment relevant section or simply add a line with the override.
// The format is typesafe-config, so you could use path expressions like group.subgroup.key = value

//rpcClient {
//  enabled = true
//
//  # Default values are environment variables
//  nodeAddress = ${?CORDA_RPC_NODE_ADDRESS}
//  rpcUsername = ${?CORDA_RPC_USERNAME}
//  rpcPassword = ${?CORDA_RPC_PASSWORD}
//
//  # Note that CorDapp JARs need to be in the classpath for Corda RPC to work,
//  # so, when changing this, make sure to adjust the classpath as well -- most likely in the shell script
//  cordappDir = cordapps
//
//  clientConfig {
//    # All values are optional and defaults are taken from net.corda.client.rpc.CordaRPCClientConfiguration
//    # connectionMaxRetryInterval (duration)
//    # minimumServerProtocolVersion (int)
//    # trackRpcCallSites (boolean)
//    # reapInterval (duration)
//    # observationExecutorPoolSize (int)
//    # connectionRetryInterval (duration)
//    # connectionRetryIntervalMultiplier (float)
//    # maxReconnectAttempts (int)
//    # maxFileSize (bytes size)
//    # deduplicationCacheExpiry (duration)
//  }
//
//  ssl {
//    enabled = false
//    trustStorePath = ${?CORDA_RPC_SSL_TRUSTSTORE_PATH}
//    trustStorePassword = ${?CORDA_RPC_SSL_TRUSTSTORE_PASSWORD}
//    trustStoreProvider = ${?CORDA_RPC_SSL_TRUSTSTORE_PROVIDER}
//  }
//}
//
//openAPI {
//  enabled = true
//
//  webServer {
//    ioThreads = 1
//    workerThreads = 8
//
//    # CORDAPTOR_API_ENDPOINT_ADDRESS environment variable, if set, would override default value below
//    listenAddress = "127.0.0.1:8500"
//    listenAddress = ${?CORDAPTOR_API_ENDPOINT_ADDRESS}
//
//    ssl {
//      enabled = false
//      enabled = ${?CORDAPTOR_SSL_ENABLED}
//
//      # name parameter for SSLContext.getInstance(), uses TLS if unspecified
//      # sslContextName
//
//      # provider parameter for SSLContext.getInstance(), uses default if unspecified; ignored if sslContextName isn't set
//      # sslContextProvider
//
//      # Parameter for KeyManagerFactory.getInstance(), uses KeyManagerFactory.getDefaultAlgorithm() if unspecified
//      # keyManagerFactoryAlgo
//
//      # Keystore provider parameter for KeyStore.getInstance(), uses default if unspecified
//      # keyStoreProvider
//
//      # Keystore file location
//      keyStoreLocation = ${?CORDAPTOR_SSL_KEYSTORE_LOCATION}
//
//      # Keystore file password
//      keyStorePassword = ${?CORDAPTOR_SSL_KEYSTORE_PASSWORD}
//
//      # Keystore type parameter for KeyStore.getInstance(), uses JKS if unspecified
//      # keyStoreType
//
//      # Parameter for TrustManagerFactory.getInstance(), uses TrustManagerFactory.getDefaultAlgorithm() if unspecified
//      # trustManagerFactoryAlgo
//
//      # Keystore provider parameter for KeyStore.getInstance(), uses default if unspecified
//      # trustStoreProvider
//
//      # Truststore file location
//      trustStoreLocation = ${?CORDAPTOR_SSL_TRUSTSTORE_LOCATION}
//
//      # Truststore file password
//      trustStorePassword = ${?CORDAPTOR_SSL_TRUSTSTORE_PASSWORD}
//
//      # Truststore type parameter for KeyStore.getInstance(), uses JKS if unspecified
//      # trustStoreType
//    }
//  }
//
//  # Flow snapshots endpoint allows to query latest snapshot of a flow using its run id
//  # regardless of whether the flow is completed or still running
//  flowSnapshots {
//    # default fallback is to disable the endpoint
//    enabled = false
//    # if local-cache module is present in classpath, flow results endpoint will be enabled if the cache is enabled
//    enabled = ${?localCache.enabled}
//  }
//
//  spec {
//    enabled = true
//  }
//
//  swaggerUI {
//    enabled = true
//  }
//
//  security {
//    handler = none
//    handler = ${?CORDAPTOR_API_SECURITY_HANDLER}
//
//    # handler = apiKey
//    apiKey {
//      # if the value is an empty list, a random API key will be generated and printed to the log
//      # multiple keys could be added to allow graceful rotation
//      keys = [ ${?CORDAPTOR_API_KEY} ]
//      header = X-API-Key
//    }
//  }
//
//  vaultQueries {
//    # Absolute maximum page size for querying the vault
//    maxPageSize = 500
//  }
//
//  flowInitiation {
//    # Absolute maximum timeout for the request to avoid wasting server resources
//    maxTimeout = 10m
//  }
//}
//
//localCache {
//  enabled = true
//
//  # Note that flow snapshots cache provided by this module can only offer retention on best endeavours basis.
//  # In particular, it uses in-memory data structures, which will be lost if the JVM is restarted.
//  # Client code should not have any critical dependencies on the fact that flow snapshots will be available.
//  flowSnapshots {
//
//    # fallback flow results cache configuration, if there is no class-specific key defined
//    default {
//      # set to false to turn flow results caching off
//      enabled = true
//
//      # how long flow results are available once the flow is completed (with either a result or an error)
//      # this is useful for API clients using polling to obtain the result of a flow
//      expireAfterCompletion = 10m
//    }
//
//    # add entries for specific flow classes by using either a simple or a full-qualified key as a name
//    # e.g. DoSomethingFlow or "com.example.flows.DoSomethingFlow" (use quotes as key contains dots)
//  }
//}