apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    targetPlatformVersion 7
    minimumPlatformVersion 7
    workflow {
        // this name becomes part of API endpoint URLs used in tests
        name "reference"
        vendor "B180"
        versionId 1
    }
    signing {
        enabled false
    }
}

repositories {
    flatDir {
        dirs 'lib'
    }
}

sourceSets {
    embeddedBundleTest {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/embeddedBundleTest/kotlin')
        }
    }
    standaloneBundleTest {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/standaloneBundleTest/kotlin')
        }
    }
}

configurations {
    compile.exclude group: 'co.paralleluniverse'

    // these dependencies are brought in by artimismq included into Corda bundles
    // and they interfere with glassfish javax.json impl, which has more recent version
    embeddedBundleTestRuntime.exclude module: 'geronimo-json_1.0_spec'
    embeddedBundleTestRuntime.exclude module: 'johnzon-core'
    standaloneBundleTestRuntime.exclude module: 'geronimo-json_1.0_spec'
    standaloneBundleTestRuntime.exclude module: 'johnzon-core'
}

tasks.withType(Test) {
    jvmArgs += "-Xmx3g" // OOMs unless enough memory is given
    jvmArgs += "-javaagent:lib/quasar.jar"
    jvmArgs += "-Dnet.corda.client.rpc.trackRpcCallSites=true"
}

task embeddedBundleTest(type: Test, dependsOn: [":bundle-rest-embedded:build", "jar"]) {
    def bundleProject = project(":bundle-rest-embedded")
    def bundleJarPath = bundleProject.tasks["jar"].archivePath

    doFirst {
        println("Copying bundle JAR file from ${bundleJarPath}")
    }

    // we have to add bundle JAR to the test classpath here instead of configuring it as a dependency
    // because otherwise there will be multiple JARS with classes in Cordaptor package in the classpath
    // caused by transitive subproject dependencies, which would cause TestCordapp to fail
    classpath = sourceSets.embeddedBundleTest.runtimeClasspath + bundleProject.files(bundleJarPath)

    testClassesDirs = sourceSets.embeddedBundleTest.output.classesDirs
    outputs.upToDateWhen { false }
}

task standaloneBundleTest(type: Test, dependsOn: ["jar"]) {
    classpath = sourceSets.standaloneBundleTest.runtimeClasspath

    testClassesDirs = sourceSets.standaloneBundleTest.output.classesDirs
    outputs.upToDateWhen { false }
}

dependencies {
    implementation project(":kernel")

    compileOnly name: 'quasar'
    runtimeOnly name: 'quasar'

    // required for cordformation plugin to be able to deploy nodes
    cordaRuntime "net.corda:corda:$corda_release_version"
    cordaRuntime "net.corda:corda-node-api:$corda_release_version"
    cordapp project(':bundle-rest-embedded')

    compileOnly "net.corda:corda-core:$corda_core_release_version"
    compileOnly "net.corda:corda-node-api:$corda_core_release_version"
    compileOnly "net.corda:corda-node:$corda_core_release_version"

    testCompile "net.corda:corda-node-driver:$corda_core_release_version"

    implementation "org.koin:koin-core:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // Embedded bundle is deployed as a fat CorDapp JAR to make it possible to use Corda's node test driver
    // This interferes with Cordaptor's defaul module resolution mechanism based on java.util.ServiceLoader
    // As a workaround embedded bundle tests are adding Cordaptor bundle JAR to the classpath at task launch
    embeddedBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    embeddedBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    embeddedBundleTestImplementation "net.corda:corda-node-driver:$corda_core_release_version"
    embeddedBundleTestImplementation "org.eclipse.jetty:jetty-client:$jetty_version"
    embeddedBundleTestImplementation "org.glassfish:javax.json:$glassfish_json_version"

    // Cordaptor running standalone mode can rely on its default module resolution mechanism,
    // so it's enough to add relevant modules as dependencies
    standaloneBundleTestImplementation project(":kernel")
    standaloneBundleTestImplementation project(":rest-endpoint")
    standaloneBundleTestImplementation project(":local-cache")
    standaloneBundleTestImplementation project(":corda-rpc-client")
    standaloneBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    standaloneBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    standaloneBundleTestImplementation "net.corda:corda-node-driver:$corda_core_release_version"
}

// Use this task to deploy local Corda network with embedded Cordaptor bundle
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = true
        }
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pAddress "localhost:10200"
        rpcSettings {
            address("0.0.0.0:10201")
            adminAddress("0.0.0.0:10202")
            useSsl(false)
        }
    }
    node {
        name "O=Bank,L=London,C=GB"
        p2pAddress "localhost:10300"
        rpcSettings {
            address("0.0.0.0:10301")
            adminAddress("0.0.0.0:10302")
            useSsl(false)
        }
        cordapp(project(':bundle-rest-embedded')) {
            config '''\
                useLocalCache=false
            '''.stripIndent()
        }
    }
}
