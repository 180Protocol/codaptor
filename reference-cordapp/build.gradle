apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'net.corda.plugins.cordapp'

cordapp {
    targetPlatformVersion 7
    minimumPlatformVersion 7
    workflow {
        name "cordaptor-reference"
        vendor "B180"
        versionId 1
    }
    signing {
        enabled false
    }
}

repositories {
    flatDir {
        dirs 'lib'
    }
}

sourceSets {
    embeddedBundleTest {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/embeddedBundleTest/kotlin')
        }
    }
}

configurations {
    compile.exclude group: 'co.paralleluniverse'

    // these dependencies are brought in by artimismq included into Corda bundles
    // and they interfere with glassfish javax.json impl, which has more recent version
    embeddedBundleTestRuntime.exclude module: 'geronimo-json_1.0_spec'
    embeddedBundleTestRuntime.exclude module: 'johnzon-core'
}

tasks.withType(Test) {
    jvmArgs += "-Xmx2g" // OOMs unless enough memory is given
    jvmArgs += "-javaagent:lib/quasar.jar"
    jvmArgs += "-Dnet.corda.client.rpc.trackRpcCallSites=true"
}

task embeddedBundleTest(type: Test, dependsOn: [":bundle-rest-embedded:build"]) {
    def bundleProject = project(":bundle-rest-embedded")
    def bundleJarPath = bundleProject.tasks["jar"].archivePath

    doFirst {
        println("Copying bundle JAR file from ${bundleJarPath}")
    }

    // we have to add bundle JAR to the test classpath here instead of configuring it as a dependency
    // because otherwise there will be multiple JARS with classes in Cordaptor package in the classpath
    // caused by transitive subproject dependencies, which would cause TestCordapp to fail
    classpath = sourceSets.embeddedBundleTest.runtimeClasspath + bundleProject.files(bundleJarPath)

    jvmArgs += "-Xmx2g" // OOMs unless enough memory is given
    jvmArgs += "-javaagent:lib/quasar.jar"
    jvmArgs += "-Dnet.corda.client.rpc.trackRpcCallSites=true"
    testClassesDirs = sourceSets.embeddedBundleTest.output.classesDirs
    outputs.upToDateWhen { false }
}

dependencies {
    implementation project(":kernel")

    runtimeOnly name: 'quasar'

    compileOnly "net.corda:corda-core:$corda_core_release_version"
    compileOnly "net.corda:corda-node-api:$corda_core_release_version"
    compileOnly "net.corda:corda-node:$corda_core_release_version"

    testCompile "net.corda:corda-node-driver:$corda_core_release_version"

    implementation "org.koin:koin-core:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    embeddedBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    embeddedBundleTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    embeddedBundleTestImplementation "net.corda:corda-node-driver:$corda_core_release_version"
    embeddedBundleTestImplementation "org.eclipse.jetty:jetty-client:$jetty_version"
    embeddedBundleTestImplementation "org.glassfish:javax.json:$glassfish_json_version"
}
