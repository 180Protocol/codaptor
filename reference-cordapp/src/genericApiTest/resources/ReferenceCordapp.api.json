{
  "components": {
    "schemas": {
      "CordaAttachmentConstraint": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "alwaysAccept"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaHashAttachmentConstraint"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "hash"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaSignatureAttachmentConstraint"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "signature"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "whitelistedByZone"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CordaCommand_Object": {
        "type": "object",
        "properties": {
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            }
          },
          "value": {
            "type": "object",
            "description": "Dynamic container for subclasses of java.lang.Object",
            "additionalProperties": "true"
          }
        },
        "required": [
          "signers",
          "value"
        ]
      },
      "CordaCoreTransaction": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaWireTransaction"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "wireTransaction"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CordaFlowInstructionOptions": {
        "type": "object",
        "properties": {
          "trackProgress": {
            "type": "boolean"
          }
        },
        "required": []
      },
      "CordaFlowInstruction_DelayedProgressFlow": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CordaFlowInstructionOptions"
          },
          "externalId": {
            "type": "string"
          },
          "delay": {
            "type": "number",
            "format": "int64"
          }
        },
        "required": [
          "externalId",
          "delay"
        ]
      },
      "CordaFlowInstruction_SimpleFlow": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/CordaFlowInstructionOptions"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "CordaFlowProgress": {
        "type": "object",
        "properties": {
          "currentStepName": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "currentStepName",
          "timestamp"
        ]
      },
      "CordaFlowResult_SimpleFlowResult": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Throwable"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "$ref": "#/components/schemas/SimpleFlowResult"
          }
        },
        "required": [
          "timestamp"
        ]
      },
      "CordaFlowSnapshot_SimpleFlowResult": {
        "type": "object",
        "properties": {
          "currentProgress": {
            "$ref": "#/components/schemas/CordaFlowProgress"
          },
          "flowClass": {
            "type": "string"
          },
          "flowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "result": {
            "$ref": "#/components/schemas/CordaFlowResult_SimpleFlowResult"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "flowClass",
          "flowRunId",
          "startedAt"
        ]
      },
      "CordaHashAttachmentConstraint": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "$ref": "#/components/schemas/CordaSecureHash"
          }
        },
        "required": [
          "attachmentId"
        ]
      },
      "CordaNetworkHostAndPort": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "number",
            "format": "int32"
          }
        },
        "required": [
          "host",
          "port"
        ]
      },
      "CordaNodeInfo": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaNetworkHostAndPort"
            }
          },
          "legalIdentitiesAndCerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaPartyAndCertificate"
            }
          },
          "platformVersion": {
            "type": "number",
            "format": "int32"
          },
          "serial": {
            "type": "number",
            "format": "int64"
          }
        },
        "required": [
          "addresses",
          "legalIdentitiesAndCerts",
          "platformVersion",
          "serial"
        ]
      },
      "CordaNodeVersionInfo": {
        "type": "object",
        "properties": {
          "platformVersion": {
            "type": "number",
            "format": "int32"
          },
          "releaseVersion": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        },
        "required": [
          "platformVersion",
          "releaseVersion",
          "revision",
          "vendor"
        ]
      },
      "CordaParty": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/CordaX500Name"
          }
        },
        "required": [
          "name"
        ]
      },
      "CordaPartyAndCertificate": {
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/CordaParty"
          }
        },
        "required": [
          "party"
        ]
      },
      "CordaSecureHash": {
        "type": "string",
        "minLength": 64,
        "maxLength": 64,
        "pattern": "^[A-Z0-9]{64}"
      },
      "CordaSignatureAttachmentConstraint": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/PublicKey"
          }
        },
        "required": [
          "key"
        ]
      },
      "CordaSignatureMetadata": {
        "type": "object",
        "properties": {
          "platformVersion": {
            "type": "number",
            "format": "int32"
          },
          "schemeNumberID": {
            "type": "number",
            "format": "int32"
          }
        },
        "required": [
          "platformVersion",
          "schemeNumberID"
        ]
      },
      "CordaSignedTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CordaSecureHash"
          },
          "content": {
            "$ref": "#/components/schemas/CordaCoreTransaction"
          },
          "sigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaTransactionSignature"
            }
          }
        },
        "required": [
          "id",
          "content",
          "sigs"
        ]
      },
      "CordaSortDirection": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "CordaStateAndRef_SimpleLinearState": {
        "type": "object",
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/CordaStateRef"
          },
          "state": {
            "$ref": "#/components/schemas/CordaTransactionState_SimpleLinearState"
          }
        },
        "required": [
          "ref",
          "state"
        ]
      },
      "CordaStateRef": {
        "type": "object",
        "properties": {
          "index": {
            "type": "number",
            "format": "int32"
          },
          "txhash": {
            "$ref": "#/components/schemas/CordaSecureHash"
          }
        },
        "required": [
          "index",
          "txhash"
        ]
      },
      "CordaTimeWindow": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaTimeWindowFrom"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "from"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaTimeWindowUntil"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "until"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CordaTimeWindowBetween"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "between"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CordaTimeWindowBetween": {
        "type": "object",
        "properties": {
          "fromTime": {
            "type": "string",
            "format": "date-time"
          },
          "untilTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": []
      },
      "CordaTimeWindowFrom": {
        "type": "object",
        "properties": {
          "fromTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": []
      },
      "CordaTimeWindowUntil": {
        "type": "object",
        "properties": {
          "untilTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": []
      },
      "CordaTransactionSignature": {
        "type": "object",
        "properties": {
          "by": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "metadata": {
            "$ref": "#/components/schemas/CordaSignatureMetadata",
            "readOnly": true
          }
        },
        "required": [
          "by",
          "metadata"
        ]
      },
      "CordaTransactionState_ContractState": {
        "type": "object",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/CordaAttachmentConstraint"
          },
          "contract": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "description": "Dynamic container for subclasses of net.corda.core.contracts.ContractState",
            "additionalProperties": "true"
          },
          "encumbrance": {
            "type": "number",
            "format": "int32"
          },
          "notary": {
            "$ref": "#/components/schemas/CordaParty"
          }
        },
        "required": [
          "constraint",
          "contract",
          "data",
          "notary"
        ]
      },
      "CordaTransactionState_SimpleLinearState": {
        "type": "object",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/CordaAttachmentConstraint"
          },
          "contract": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/SimpleLinearState"
          },
          "encumbrance": {
            "type": "number",
            "format": "int32"
          },
          "notary": {
            "$ref": "#/components/schemas/CordaParty"
          }
        },
        "required": [
          "constraint",
          "contract",
          "data",
          "notary"
        ]
      },
      "CordaUniqueIdentifier": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "CordaVaultConstraintInfo": {
        "type": "object",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/CordaAttachmentConstraint"
          }
        },
        "required": [
          "constraint"
        ]
      },
      "CordaVaultPage_SimpleLinearState": {
        "type": "object",
        "properties": {
          "stateTypes": {
            "$ref": "#/components/schemas/CordaVaultStateStatus"
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaStateAndRef_SimpleLinearState"
            }
          },
          "statesMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaVaultStateMetadata"
            }
          },
          "totalStatesAvailable": {
            "type": "number",
            "format": "int64"
          }
        },
        "required": [
          "stateTypes",
          "states",
          "statesMetadata",
          "totalStatesAvailable"
        ]
      },
      "CordaVaultQuerySortColumn": {
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/CordaSortDirection"
          },
          "sortAttribute": {
            "type": "string"
          }
        },
        "required": [
          "direction",
          "sortAttribute"
        ]
      },
      "CordaVaultQuery_SimpleLinearState": {
        "type": "object",
        "properties": {
          "consumedTimeIsAfter": {
            "type": "string",
            "format": "date-time"
          },
          "contractStateClass": {
            "type": "string"
          },
          "linearStateExternalIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linearStateUUIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "notaryNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaX500Name"
            }
          },
          "ownerNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaX500Name"
            }
          },
          "pageNumber": {
            "type": "number",
            "format": "int32"
          },
          "pageSize": {
            "type": "number",
            "format": "int32"
          },
          "participantNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaX500Name"
            }
          },
          "recordedTimeIsAfter": {
            "type": "string",
            "format": "date-time"
          },
          "relevancyStatus": {
            "$ref": "#/components/schemas/CordaVaultRelevancyStatus"
          },
          "sortCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaVaultQuerySortColumn"
            }
          },
          "stateStatus": {
            "$ref": "#/components/schemas/CordaVaultStateStatus"
          }
        },
        "required": [
          "contractStateClass"
        ]
      },
      "CordaVaultRelevancyStatus": {
        "type": "string",
        "enum": [
          "RELEVANT",
          "NOT_RELEVANT",
          "ALL"
        ]
      },
      "CordaVaultStateMetadata": {
        "type": "object",
        "properties": {
          "constraintInfo": {
            "$ref": "#/components/schemas/CordaVaultConstraintInfo"
          },
          "consumedTime": {
            "type": "string",
            "format": "date-time"
          },
          "contractStateClassName": {
            "type": "string"
          },
          "lockId": {
            "type": "string"
          },
          "lockUpdateTime": {
            "type": "string",
            "format": "date-time"
          },
          "notary": {
            "type": "object",
            "description": "Dynamic container for subclasses of net.corda.core.identity.AbstractParty",
            "additionalProperties": "true"
          },
          "recordedTime": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "$ref": "#/components/schemas/CordaStateRef"
          },
          "relevancyStatus": {
            "$ref": "#/components/schemas/CordaVaultRelevancyStatus"
          },
          "status": {
            "$ref": "#/components/schemas/CordaVaultStateStatus"
          }
        },
        "required": [
          "contractStateClassName",
          "recordedTime",
          "ref",
          "status"
        ]
      },
      "CordaVaultStateStatus": {
        "type": "string",
        "enum": [
          "UNCONSUMED",
          "CONSUMED",
          "ALL"
        ]
      },
      "CordaWireTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CordaSecureHash"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaStateRef"
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaTransactionState_ContractState"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaCommand_Object"
            }
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaStateRef"
            }
          },
          "notary": {
            "$ref": "#/components/schemas/CordaParty"
          },
          "timeWindow": {
            "$ref": "#/components/schemas/CordaTimeWindow"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CordaSecureHash"
            }
          },
          "networkParametersHash": {
            "$ref": "#/components/schemas/CordaSecureHash"
          }
        },
        "required": [
          "id",
          "inputs",
          "outputs",
          "commands",
          "references",
          "attachments"
        ]
      },
      "CordaX500Name": {
        "type": "string"
      },
      "PublicKey": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string",
            "readOnly": true
          },
          "knownParty": {
            "$ref": "#/components/schemas/CordaParty",
            "readOnly": true
          }
        },
        "required": []
      },
      "SimpleFlowResult": {
        "type": "object",
        "properties": {
          "output": {
            "$ref": "#/components/schemas/CordaStateAndRef_SimpleLinearState"
          }
        },
        "required": [
          "output"
        ]
      },
      "SimpleLinearState": {
        "type": "object",
        "properties": {
          "linearId": {
            "$ref": "#/components/schemas/CordaUniqueIdentifier"
          },
          "participant": {
            "$ref": "#/components/schemas/CordaParty"
          }
        },
        "required": [
          "linearId",
          "participant"
        ]
      },
      "Throwable": {
        "type": "object",
        "properties": {
          "class": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "cause": {
            "type": "object",
            "description": "Dynamic container for subclasses of java.lang.Object",
            "additionalProperties": "true"
          }
        },
        "required": []
      }
    }
  },
  "info": {
    "title": "Cordaptor API",
    "version": "autogenerated"
  },
  "openapi": "3.0.3",
  "paths": {
    "/node/info": {
      "get": {
        "operationId": "getNodeInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaNodeInfo"
                }
              }
            },
            "description": "Successful operation"
          }
        },
        "summary": "Returns network map entry for the underlying Corda node",
        "tags": [
          "nodeDiagnostic"
        ]
      }
    },
    "/node/reference/DelayedProgressFlow": {
      "post": {
        "operationId": "initiateDelayedProgressFlow",
        "parameters": [
          {
            "description": "Timeout for synchronous flow execution, 0 for immediate return",
            "in": "query",
            "name": "wait",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CordaFlowInstruction_DelayedProgressFlow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution completed successfully and its result is available"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution stared and its outcome is not yet available"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution failed and error information is available"
          }
        },
        "summary": "Initiates and tracks execution of Corda flow DelayedProgressFlow with given parameters",
        "tags": [
          "flowInitiation"
        ]
      }
    },
    "/node/reference/SimpleFlow": {
      "post": {
        "operationId": "initiateSimpleFlow",
        "parameters": [
          {
            "description": "Timeout for synchronous flow execution, 0 for immediate return",
            "in": "query",
            "name": "wait",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CordaFlowInstruction_SimpleFlow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution completed successfully and its result is available"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution stared and its outcome is not yet available"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaFlowSnapshot_SimpleFlowResult"
                }
              }
            },
            "description": "Flow execution failed and error information is available"
          }
        },
        "summary": "Initiates and tracks execution of Corda flow SimpleFlow with given parameters",
        "tags": [
          "flowInitiation"
        ]
      }
    },
    "/node/reference/SimpleLinearState/query": {
      "get": {
        "operationId": "fetchSimpleLinearStateInstances",
        "parameters": [
          {
            "description": "One or more of X500 names of notarizing parties for a state",
            "explode": true,
            "in": "query",
            "name": "notary",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "description": "One or more of X500 names of owning parties for ownable states",
            "explode": true,
            "in": "query",
            "name": "owner",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "description": "One or more of X500 names of participants in a state",
            "explode": true,
            "in": "query",
            "name": "participant",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "description": "One or more UUIDs used in unique identifiers of linear states",
            "explode": true,
            "in": "query",
            "name": "uuid",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "One or more external keys used in unique identifiers of linear states",
            "explode": true,
            "in": "query",
            "name": "externalId",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "description": "Approach to querying consumed states (ignore by default)",
            "in": "query",
            "name": "consumed",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ignore",
                "include",
                "only"
              ]
            }
          },
          {
            "description": "Size of the page to return (200 by default)",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "Zero-based index of the page to return (0 by default)",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaVaultPage_SimpleLinearState"
                }
              }
            },
            "description": "Query ran successfully"
          }
        },
        "summary": "Performs a query of the vault of the underlying Corda node with a simplified criteria",
        "tags": [
          "vaultQuery"
        ]
      },
      "post": {
        "operationId": "querySimpleLinearStateInstances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CordaVaultQuery_SimpleLinearState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaVaultPage_SimpleLinearState"
                }
              }
            },
            "description": "Query ran successfully"
          }
        },
        "summary": "Performs a query of the vault of the underlying Corda node with a complex criteria",
        "tags": [
          "vaultQuery"
        ]
      }
    },
    "/node/reference/SimpleLinearState/{hash}({index})": {
      "get": {
        "operationId": "getSimpleLinearStateByRef",
        "parameters": [
          {
            "description": "Transaction output index",
            "in": "path",
            "name": "index",
            "required": true,
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "description": "Transaction hash value",
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CordaSecureHash"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleLinearState"
                }
              }
            },
            "description": "Successfully retrieved contract state"
          },
          "404": {
            "description": "Contract state with given hash and index was not found"
          }
        },
        "summary": "Finds contract state recorded to the ledger with a given hash and index ",
        "tags": [
          "vaultQuery"
        ]
      }
    },
    "/node/tx/{hash}": {
      "get": {
        "operationId": "findTransactionByHash",
        "parameters": [
          {
            "description": "Transaction hash value",
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CordaSecureHash"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaSignedTransaction"
                }
              }
            },
            "description": "Successfully retrieved transaction"
          },
          "404": {
            "description": "Transaction with given hash value was not found"
          }
        },
        "summary": "Finds a transaction recorded to the ledger with a given hash value",
        "tags": [
          "vaultQuery"
        ]
      }
    },
    "/node/version": {
      "get": {
        "operationId": "getNodeVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CordaNodeVersionInfo"
                }
              }
            },
            "description": "Successful operation"
          }
        },
        "summary": "Returns software version information for the underlying Corda node",
        "tags": [
          "nodeDiagnostic"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8500"
    }
  ]
}